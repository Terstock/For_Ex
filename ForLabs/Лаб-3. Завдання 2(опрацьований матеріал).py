#!/usr/bin/env python
# coding: utf-8

# #  Лабораторна робота №3
# ### практичне завдання 2 
# ***

# ### Функції: простір імен (namespace) та область видимости (scope)
# 
# __Функція__ - це блок програмного коду, який виконує деяку ізольовану задачу і може викликатись з іншого місця програми.
# 
# [Докладніше про функції](https://uk.wikipedia.org/wiki/Підпрограма)
# 
# _Функція_ характерізується наступними _властивостями_ :
# 
# - __ім'я__ - символічне посилання по якому функція викликається
# - __аргументи__(параметри) - список об'єктів, які передаються в функцію ззовні
# - __значення, що повертаються__ - об'єкти, які повертає функція перед тим, як завершити свою роботу 

# In[1]:


def some_func(arg1, arg2):
    ''' Це якась функція'''
    a = arg1 * 2
    return a    


# In[2]:


type(some_func), id(some_func)


# In[3]:


print(dir(some_func))


# In[4]:


some_func.__doc__, some_func.__name__, some_func.__code__, some_func.__module__


# In[5]:


print(some_func.__globals__["_ih"][1])


# ___ім'я функції___ - будь-яке припустиме ім'я python-змінної
# 
# ___аргументи функції___ - будь-які об'єкти _python_ (можуть бути відсутні)
# 
# Два типи аргументів:
# 1. __Позиціоновані__ ```def f (arg1, "John", 123): ```
# 2. __Іменовані__ ``` def f (name = "John", par = 123): ```
# 
# __Правило:__ спочатку записуються позиціоновані аргументи, потім іменовані
# 
# __Значення що повертається__ - будь який припустимий об'єкт чи перелік об'єктів який йде після ```return```, або нічого 
# 
# ##### return завжди завершує виконання функції
# 
# #### функція - це БЛОЧНА структура
# 

# In[6]:


def f (a, n = 1):
    c = "ccc"
    print(n, a, c)
    return 


# #### Простір імен - це словник (dict), який вміщує посилання на об'єкти, що знаходяться всередині блоку
# 
# __Типи__ namespace:
# 
# 1. Вбудований (Builtins) - створюється при запуску Python
# 2. Глобальний (Global) - створюється при запуску програмного модуля
# 3. Локальний (Local) - створюється для кожного блока програми (def, for, with, ...)
# 4. Огорожений (Enclosed) - створюється коли є вкдаденість блоків
# 
# 

# In[7]:


# Вбудований namespace
print(dir(__builtins__))


# In[8]:


# Глобальний namespace
print(dir())


# In[9]:


def f (a, n = 1):
    c = "ccc"
    print(n, a, c)
    # Локальний namespace
    print(dir())


# In[10]:


f(123)


# In[11]:


# Глобальний об'єкт
x = [111, 222]

def f (a, b = 1):
    c = "ccc"
    
    # вкладений блок
    def g ():
        d = 999
        # x = 0
        print("Функція g:")
        print('\t',a, b, c, d, x)
        print('\t', dir(),'\n')
    
    g()
    # x = -999
    print("Функція f:")
    print(a, b, c, x)
    print(dir())


# In[12]:


f(123)


# #### Область видимості (scope)  - це блок коду де об'єкт є доступним
# 
# __Scope__ діє __тільки__ для функцій, моодулів та класів

# In[13]:


x = 10
for _ in [1, 2, 3]:
    x += 1

print(x)


# ### Модулі та пакети

# __Модуль__ - це програмний код, який містить функції об'єднані для вирішення якоїсь задачі
# 
# __Пакет__ - це сукупність модулів, що знаходяться в одній директорії в якій додатково розміщується файл с назвою __init.py__
# 
# [Докладніше про модулі і пакети](https://devpractice.ru/python-lesson-13-modules-and-packages/)
# 
# В [Стандартній бібліотеці Python](https://docs.python.org/3/library/) наведено перелік модулів, які доступні по замовченню
# 
# Інші модулі треба завантажувати та інсталювати з офіційного репозиторію python-модулів [PyPi](https://pypi.org). Завантаження виконується за допомогою пакетного менеджера [pip](https://pythonworld.ru/osnovy/pip.html)

# In[14]:


# підключення модулів до програмного коду
import math


# In[15]:


math.__doc__


# In[16]:


print(dir(math))


# In[17]:


# підключення окремої функції з модуля
from math import log2 
log2(111)

